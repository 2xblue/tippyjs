@mixin enter-transform ($placement, $animation) {
  @if ($animation == 'perspective') {
    @if ($placement == 'top') {
      transform: translateY(-10px) rotateX(0);
    } @else if ($placement == 'bottom') {
      transform: translateY(10px) rotateX(0);
    } @else if ($placement == 'left') {
      transform: translateX(-10px) rotateY(0);
    } @else if ($placement == 'right') {
      transform: translateX(10px) rotateY(0);
    }
  } @else if ($animation == 'fade') {
    @if ($placement == 'top') {
      transform: translateY(-10px);
    } @else if ($placement == 'bottom') {
      transform: translateY(10px);
    } @else if ($placement == 'left') {
      transform: translateX(-10px);
    } @else if ($placement == 'right') {
      transform: translateX(10px);
    }
  } @else if ($animation == 'scale') {
    @if ($placement == 'top') {
      transform: translateY(-10px) scale(1);
    } @else if ($placement == 'bottom') {
      transform: translateY(10px) scale(1);
    } @else if ($placement == 'left') {
      transform: translateX(-10px) scale(1);
    } @else if ($placement == 'right') {
      transform: translateX(10px) scale(1);
    }
  }
}

@mixin leave-transform ($placement, $animation) {
  @if ($animation == 'perspective') {
    @if ($placement == 'top') {
      transform: translateY(0) rotateX(90deg);
    } @else if ($placement == 'bottom') {
      transform: translateY(0) rotateX(-90deg);
    } @else if ($placement == 'left') {
      transform: translateX(0) rotateY(-90deg);
    } @else if ($placement == 'right') {
      transform: translateX(0) rotateY(90deg);
    }
  } @else if ($animation == 'shift') {
    @if ($placement == 'top') {
      transform: translateY(0);
    } @else if ($placement == 'bottom') {
      transform: translateY(0);
    } @else if ($placement == 'left') {
      transform: translateX(0);
    } @else if ($placement == 'right') {
      transform: translateX(0);
    }
  } @else if ($animation == 'scale') {
    @if ($placement == 'top') {
      transform: translateY(0) scale(0);
    } @else if ($placement == 'bottom') {
      transform: translateY(0) scale(0);
    } @else if ($placement == 'left') {
      transform: translateX(0) scale(0);
    } @else if ($placement == 'right') {
      transform: translateX(0) scale(0);
    }
  } @else if ($animation == 'none') {
    @if ($placement == 'top') {
      transform: translateY(-10px);
    } @else if ($placement == 'bottom') {
      transform: translateY(10px);
    } @else if ($placement == 'left') {
      transform: translateX(-10px);
    } @else if ($placement == 'right') {
      transform: translateX(10px);
    }
  }
}

@mixin circle-transform-enter ($placement) {
  $scale: 1;
  @if ($placement == 'top') {
    transform: scale($scale) translate(-50%, -55%);
  } @else if ($placement == 'bottom') {
    transform: scale($scale) translate(-50%, -45%);
  } @else if ($placement == 'left') {
    transform: scale($scale) translate(-50%, -50%);
  } @else if ($placement == 'right') {
    transform: scale($scale) translate(-50%, -50%);
  }
}

@mixin circle-transform-leave ($placement) {
  $scale: 0.15;
  @if ($placement == 'top') {
    transform: scale($scale) translate(-50%, -50%);
  } @else if ($placement == 'bottom') {
    transform: scale($scale) translate(-50%, -5%);
  } @else if ($placement == 'left') {
    transform: scale($scale) translate(-50%, -50%);
  } @else if ($placement == 'right') {
    transform: scale($scale) translate(-50%, -50%);
  }
}

@mixin arrow ($placement, $width, $color) {
  @if ($placement == 'top') {
    border-top: $width solid $color;
    border-right: $width solid transparent;
    border-left: $width solid transparent;
  } @else if ($placement == 'bottom') {
    border-bottom: $width solid $color;
    border-right: $width solid transparent;
    border-left: $width solid transparent;
  } @else if ($placement == 'left') {
    border-left: $width solid $color;
    border-top: $width solid transparent;
    border-bottom: $width solid transparent;
  } @else if ($placement == 'right') {
    border-right: $width solid $color;
    border-top: $width solid transparent;
    border-bottom: $width solid transparent;
  }
}

@mixin arrow-position ($placement, $width) {
  @if ($placement == 'top') {
    bottom: -$width;
  } @else if ($placement == 'bottom') {
    top: -$width;
  } @else if ($placement == 'left') {
    right: -$width;
  } @else if ($placement == 'right') {
    left: -$width;
  }
}

@mixin arrow-margin ($placement) {
  @if ($placement == 'top' or $placement == 'bottom') {
    margin: 0 9px;
  } @else {
    margin: 6px 0;
  }
}

@mixin roundarrow ($placement, $width, $color) {
  width: $width;
  height: $width;
  fill: $color;
}

@mixin roundarrow-transform ($placement) {
  @if ($placement == 'top') {
    transform: rotate(180deg);
  } @else if ($placement == 'bottom') {
    transform: rotate(0);
  } @else if ($placement == 'left') {
    transform: rotate(90deg);
  } @else if ($placement == 'right') {
    transform: rotate(-90deg);
  }
}

$placements: 'top', 'bottom', 'left', 'right';
$origins: bottom, top, right, left;
$circle-origins: 0% 33%, 0% -50%, 50% 0%, -50% 0%;

.tippy-touch {
  cursor: pointer !important;
}

.tippy-popper {
  max-width: 350px;
  perspective: 700px;
  z-index: 9999;
  outline: 0;
  transition-timing-function: cubic-bezier(.165, .84, .44, 1);
  pointer-events: none;

  &.html-template {
    max-width: 96%;
    max-width: calc(100% - 20px);
  }

  @each $placement in $placements {
    &[x-placement^=#{$placement}] {
      
      [x-roundarrow] {
        @include roundarrow($placement, 24px, #333);
        @include arrow-position($placement, 15px);
        
        svg {
          @include roundarrow-transform($placement);
        }
      }

      [x-arrow] {
        @include arrow($placement, 7px, #333);
        @include arrow-position($placement, 7px);
        @include arrow-margin($placement);
      }

      [x-circle] {
        transform-origin: nth($circle-origins, index($placements, $placement));

        &[x-state=visible] {
          @include circle-transform-enter($placement);
          opacity: 1;
        }

        &[x-state=hidden] {
          @include circle-transform-leave($placement);
          opacity: 0;
        }
      }

      .tippy-tooltip.light-theme {
        [x-circle] {
          background-color: white;
        }
        [x-arrow] {
          @include arrow($placement, 7px, white);
        }
        [x-roundarrow] {
          @include roundarrow($placement, 24px, white);
        }
      }

      .tippy-tooltip.transparent-theme {
        [x-circle] {
          background-color: rgba(0,0,0,0.7);
        }
        [x-arrow] {
          @include arrow($placement, 7px, rgba(0,0,0,0.7));
        }
        [x-roundarrow] {
          @include roundarrow($placement, 24px, rgba(0,0,0,0.7));
        }
      }

      [x-animation=perspective] {
        transform-origin: nth($origins, index($placements, $placement));

        &[x-state=visible] {
          opacity: 1;
          @include enter-transform($placement, 'perspective');
        }
        &[x-state=hidden] {
          opacity: 0;
          @include leave-transform($placement, 'perspective');
        }
      }

      [x-animation=fade] {
        &[x-state=visible] {
          opacity: 1;
          @include enter-transform($placement, 'fade')
        }
        &[x-state=hidden] {
          opacity: 0;
          @include enter-transform($placement, 'fade')
        }
      }

      [x-animation=shift] {
        &[x-state=visible] {
          opacity: 1;
          @include enter-transform($placement, 'fade')
        }
        &[x-state=hidden] {
          opacity: 0;
          @include leave-transform($placement, 'shift')
        }
      }

      [x-animation=scale] {
        &[x-state=visible] {
          opacity: 1;
          @include enter-transform($placement, 'scale')
        }
        &[x-state=hidden] {
          opacity: 0;
          @include leave-transform($placement, 'scale')
        }
      }

    }
  }

  .tippy-tooltip.transparent-theme {
    background-color: rgba(0,0,0,0.7);

    &[x-animatefill] {
      background-color: transparent;
    }
  }

  .tippy-tooltip.light-theme {
    color: #26323d;
    box-shadow: 0 4px 20px 4px rgba(0, 20, 60, 0.1),
    0 4px 80px -8px rgba(0, 20, 60, 0.2);
    background-color: white;

    &[x-animatefill] {
      background-color: transparent;
    }
  }
}

.tippy-tooltip {
  position: relative;
  color: white;
  border-radius: 4px;
  font-size: 0.95rem;
  padding: 0.4rem 0.8rem;
  text-align: center;
  will-change: transform;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #333;

  &[x-size=small] {
    padding: 0.25rem 0.5rem;
    font-size: 0.8rem;
  }

  &[x-size=large] {
    padding: 0.6rem 1.2rem;
    font-size: 1.2rem;
  }

  &[x-animatefill] {
    overflow: hidden;
    background-color: transparent;
  }

  &[x-interactive] {
    pointer-events: auto;
  }

  &[x-inertia] {
    transition-timing-function: cubic-bezier(.53,2,.36,.85);
  }

  [x-arrow], [x-roundarrow] {
    position: absolute;
    width: 0;
    height: 0;
  }

  [x-circle] {
    position: absolute;
    will-change: transform;
    background-color: #333;
    border-radius: 50%;
    width: 130%;
    width: calc(110% + 2rem);
    left: 50%;
    top: 50%;
    z-index: -1;
    overflow: hidden;
    transition: all ease;

    &::before {
      content: '';
      padding-top: 90%;
      float: left;
    }
  }
}

@media (max-width: 450px) {
  .tippy-popper {
    max-width: 96%;
    max-width: calc(100% - 20px);
  }
}
